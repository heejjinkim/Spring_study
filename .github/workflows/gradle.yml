# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# workflow 이름
name: Java CI with Gradle

# workflow를 발생시키는 이벤트 정의
on:
  push:
    branches: [ "main" ] # main 브랜치에 push 이벤트가 발생하면 job 실행
  pull_request:
    branches: [ "main" ] # main 브랜치에 pr 이벤트가 발생하면 job 실행

# 포함된 job 정의
jobs:
  # build 작업
  build: # job 이름
    runs-on: ubuntu-latest # 해당 job을 어떤 OS에서 실행할 것인지
    permissions:
      contents: read

    # job에 포함된 step 정의
    steps:
    - uses: actions/checkout@v4 # step에서 사용할 action - 레포지토리의 코드를 체크아웃

    # JAVA JDK 설치
    - name: Set up JDK 17 # step 이름
      uses: actions/setup-java@v4 
      with:
        java-version: '17' # 17버전
        distribution: 'temurin'

    ## application.yml 생성 후 secret 값 복붙
#    - run: mkdir -p ./src/main/resources
#    - run: cd ./src/main/resources
#    - run: touch ./application.yml
#    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
#    - run: cat ./src/main/resources/application.yml

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    # Gradle 환경 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0 

    # Gradle로 프로젝트 빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # 빌드된 파일 이름 변경
    - name: Change Name of Jar File
      run: mv ./build/libs/*SNAPSHOT.jar ./cicdtest.jar
      
    # S3 연결 확인
    - name: Check S3 Health
      run: |
        echo "Performing S3 health check..."
        if aws s3api head-bucket --bucket ${{ secrets.AWS_S3_BUCKET }} --region ap-northeast-2; then
          echo "S3 connection successful."
        else
          echo "Failed to connect to S3."
          exit 1
        fi
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2

     # S3에 JAR 파일 업로드
    - name: Upload to S3
      run: |
        aws s3 cp cicdtest.jar s3://${{ secrets.AWS_S3_BUCKET }}/ureca/cicdtest.jar --acl public-read
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2

    # # 빌드한 것을 버킷에 배포 
    # - name: Sync Bucket
    #   env:
    #     AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
    #     AWS_EC2_METADATA_DISABLED: true
    #   run: |
    #     aws s3 sync \
    #       --region ap-northeast-2 \
    #       build s3://urecabucket/cicdtest-.jar \
    #       --delete

    # 이름 변경된 cicdtest.jar 파일 EC2로 전송 
    # - name: Transfer the Jar File to EC2
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     key: ${{ secrets.EC2_KEY }}
    #     source: cicdtest.jar
    #     target: /home/ubuntu

  # 배포 작업
  deploy: 
    runs-on: ubuntu-latest
    needs: build # build 작업이 완료된 후 실행
    steps:
    
    # S3에서 Jar 파일 다운
    - name: Download JAR file from S3
      run: |
        aws s3 cp s3://${{ secrets.AWS_S3_BUCKET }}/ureca/cicdtest.jar ./cicdtest.jar
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ap-northeast-2
      
    # ec2 접속 후 Jar 파일 실행
    - name: Execute jar file on EC2
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        # port: ${{ secrets.EC2_PORT }}
        script: |
          sudo fuser -k -n tcp 8080 || true
          sudo nohup java -jar cicdtest.jar > ./output.log 2>&1 &

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build
