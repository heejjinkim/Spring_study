# workflow 이름
name: Java CI with Gradle

# workflow를 발생시키는 이벤트 정의
on:
  push:
    branches: [ "main" ] # main 브랜치에 push 이벤트가 발생하면 job 실행
  pull_request:
    branches: [ "main" ] # main 브랜치에 pr 이벤트가 발생하면 job 실행

# 포함된 job 정의
jobs:
  # build 작업
  build: # job 이름
    runs-on: ubuntu-latest # 해당 job을 어떤 OS에서 실행할 것인지
    permissions:
      contents: read

    # job에 포함된 step 정의
    steps:
    - uses: actions/checkout@v4 # step에서 사용할 action - 레포지토리의 코드를 체크아웃

    # JAVA JDK 설치
    - name: Set up JDK 17 # step 이름
      uses: actions/setup-java@v4 
      with:
        java-version: '17' # 17버전
        distribution: 'temurin'

    ## application.yml 생성 후 secret 값 복붙
#    - run: mkdir -p ./src/main/resources
#    - run: cd ./src/main/resources
#    - run: touch ./application.yml
#    - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
#    - run: cat ./src/main/resources/application.yml

    # Gradle 환경 설치
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0 

    # Gradle로 프로젝트 빌드
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build

#    # 빌드된 파일 이름 변경
#    - name: Change Name of Jar File
#      run: mv ./build/libs/*SNAPSHOT.jar ./cicdtest.jar

    # 도커 파일 빌드
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/ureca:latest

    # Docker Hub 로그인
    - name: Log in to Docker Hub
      uses: docker/login-action@v3  # Docker Hub에 로그인
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자 이름
        password: ${{ secrets.DOCKER_HUB_TOKEN}}  # Docker Hub 비밀번호

    # 도커 이미지 푸시
    - name: Push the Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/ureca:latest

    # 이름 변경된 cicdtest.jar 파일 EC2로 전송 
    # - name: Transfer the Jar File to EC2
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USERNAME }}
    #     key: ${{ secrets.EC2_KEY }}
    #     source: cicdtest.jar
    #     target: /home/ubuntu

  # 배포 작업
  deploy: 
    runs-on: ubuntu-latest
    needs: build # build 작업이 완료된 후 실행
    steps:

    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master  # EC2 인스턴스에 SSH로 접근
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker network create docker_network || true  # 네트워크 생성
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }}  # EC2에서 Docker Hub에 로그인
          docker pull ${{ secrets.DOCKER_USERNAME }}/ureca:latest  # 최신 Docker 이미지 다운로드
          docker stop ureca_server || true  # 실행 중인 컨테이너 중지 (없어도 무시)
          docker rm ureca_server || true  # 기존 컨테이너 제거 (없어도 무시)
          docker run -d --name ureca_server --network docker_network -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/ureca:latest  # 새로운 컨테이너 실행

    # ec2 접속 후 직접 Jar 파일 실행
#    - name: Execute jar file on EC2
#      uses: appleboy/ssh-action@v0.1.10
#      with:
#        host: ${{ secrets.EC2_HOST }}
#        username: ${{ secrets.EC2_USERNAME }}
#        key: ${{ secrets.EC2_KEY }}
#        # port: ${{ secrets.EC2_PORT }}
#        script: |
#          sudo fuser -k -n tcp 8080 || true
#          sudo nohup java -jar cicdtest.jar > ./output.log 2>&1 &
